---
name: CI Pipeline

on: [push, pull_request]

env:
  REGISTRY: k8scc01covidacr.azurecr.io

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      # allows workflow to access the repo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs full git history to get the list of files that changed across commits
          fetch-depth: 0

      - name: Super linter
        uses: super-linter/super-linter@v7
        env:
          DEFAULT_BRANCH: main
          MULTI_STATUS: ${{ env.ACT && 'false' || 'true' }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_GO_MODULES: true
          VALIDATE_GITLEAKS: true
          VALIDATE_YAML: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      # allows workflow to access the repo
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Go mod tidy (ensure dependencies are clean)
        run: go mod tidy -v

      - name: Download Go modules
        run: go mod download

      - name: Run Go vet
        run: go vet -v ./...

      - name: Run Go tests
        run: go test -v -race ./...

  filter:
    name: Filter Images to Build
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.filter.outputs.changes }}

    steps:
      # allows workflow to access the repo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Used for determining which vertical has been changed

      # Determine which images need to be built
      - name: Check for image-specific file changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          # Define filters for each image
          filters: .github/configs/paths.yaml
          base: 'main'

  build-push:
    name: Push Docker Images
    needs: filter  # Depends on the job that figures out what to build
    if: ${{needs.filter.outputs.images != '[]'}}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # The list of images to scan
        image: ${{ fromJson(needs.filter.outputs.images) }}

    steps:
      # allows workflow to access the repo
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        if: ${{ !env.ACT }}
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Image ${{ matrix.image }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.image }}/Dockerfile
          tags: ${{ env.REGISTRY }}/volume-cleaner-${{ matrix.image }}:latest
          push: ${{ env.ACT && 'false' || 'true' }}

  # Calling Reusable Workflows for Trivy Docker Image Scans
  call-trivy-scan:
    name: Trivy Scans
    needs: filter
    if: ${{needs.filter.outputs.images != '[]'}}
    uses: ./.github/workflows/trivy-scan.yaml
    with:
      verticals: ${{needs.filter.outputs.images}}
    secrets: inherit

  # creates a local cluster and tests for correct behaviour
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      # allows workflow to access the repo
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Kind
        uses: helm/kind-action@v1
        with:
          registry: true
          registry_port: 5050

      - name: Create Kind cluster
        run: kind create cluster

      - name: Build docker files
        run: |
          docker build --progress=plain --no-cache -t localhost:5050/controller:test -f testing/controller/Dockerfile ..
          docker build --progress=plain --no-cache -t localhost:5050/scheduler:test -f testing/scheduler/Dockerfile ..

      - name: Push docker files to Kind cluster
        run: |
          docker push localhost:5050/controller:test
          docker push localhost:5050/scheduler:test
          kind load docker-image localhost:5050/controller:test
          kind load docker-image localhost:5050/scheduler:test

      - name: Apply cluster resources
        run: kubectl apply -f testing/manifests.yaml

      - name: Apply helper resources
        run: |
          kubectl apply -f manifests/rbac.yaml \
            -f manifests/serviceaccount.yaml \
            -f manifests/netpol.yaml

      - name: Apply configs
        run: |
          kubectl apply -f manifests/controller/controller_config.yaml \
            -f manifests/scheduler/scheduler_config.yaml \
            -f manifests/scheduler/scheduler_secret.yaml

      - name: Apply controller
        run: |
          kubectl apply -f testing/controller/controller_deployment.yaml
          sleep 5

      - name: Test label applied
        run: |
          if ! kubectl get pvc pvc1 -n anray-liu -o yaml | grep -q labels; then
              echo "No labels found. Test failed."
              exit 2
          fi
          OUTPUT="$(kubectl get pvc pvc1 -n anray-liu -o yaml | grep -A 2 "labels:")"
          if [[ "${OUTPUT}" == *"volume-cleaner/unattached-time:"* ]] && [[ "${OUTPUT}" == *"volume-cleaner/notification-count:"* ]]; then
              echo "Both labels found. Test passed."
          else
              echo "Output: ${OUTPUT}"
              echo "Expected both labels, but one or both are missing. Test failed."
              exit 2
          fi

      - name: Test label not applied
        run: |
          if ! kubectl get pvc pvc2 -n anray-liu -o yaml | grep -q labels; then
              echo "Test passed."
          else
              OUTPUT="$(kubectl get pvc pvc2 -n anray-liu -o yaml | grep labels)"
              echo "Output: ${OUTPUT}"
              echo "Labels found. Test failed."
              exit 2
          fi

      - name: Create stateful set
        run: |
          kubectl apply -f testing/sts.yaml
          sleep 5

      - name: Test label removed
        run: |
          if ! kubectl get pvc pvc1 -n anray-liu -o yaml | grep -q labels; then
              echo "Test passed."
          else
              OUTPUT="$(kubectl get pvc pvc1 -n anray-liu -o yaml | grep labels)"
              echo "Output: ${OUTPUT}"
              echo "Labels found. Test failed."
              exit 2
          fi

      - name: Delete stateful set
        run: |
          kubectl delete sts sts1 -n anray-liu
          sleep 5

      - name: Test label applied again
        run: |
          if ! kubectl get pvc pvc1 -n anray-liu -o yaml | grep -q labels; then
              echo "No labels found. Test failed."
              exit 2
          fi
          OUTPUT="$(kubectl get pvc pvc1 -n anray-liu -o yaml | grep -A 2 "labels:")"
          if [[ "${OUTPUT}" == *"volume-cleaner/unattached-time:"* ]] && [[ "${OUTPUT}" == *"volume-cleaner/notification-count:"* ]]; then
              echo "Both labels found again. Test passed."
          else
              echo "Output: ${OUTPUT}"
              echo "Expected both labels, but one or both are missing. Test failed."
              exit 2
          fi

      - name: Apply scheduler
        run: |
          kubectl apply -f testing/scheduler/scheduler_job.yaml
          sleep 10

      # extra information
      - name: Print logs
        run: |
          echo "----------controller----------"
          kubectl logs -l app=volume-cleaner-controller -n das --tail 500
          kubectl logs -l app=volume-cleaner-scheduler -n das --tail 500
          echo "----------scheduler----------"

      - name: Test scheduler for pvc1
        run: |
          if ! kubectl logs -l app=volume-cleaner-scheduler -n das --tail | grep "Found pvc pvc1 from namespace anray-liu"; then
              echo "Scheduler didn't find pvc1. Test failed."
              exit 2
          else
              if ! kubectl logs -l app=volume-cleaner-scheduler -n das --tail | grep "Found pvc pvc1 from namespace anray-liu" -A 3 | grep "Grace period not passed."; then
                  echo "Scheduler didn't skip pvc1. Test failed."
                  exit 2
              else
                  echo "Test passed."
              fi
          fi

      - name: Test scheduler for pvc2
        run: |
          if ! kubectl logs -l app=volume-cleaner-scheduler -n das --tail | grep "Found pvc pvc2 from namespace anray-liu"; then
              echo "Scheduler didn't find pvc2. Test failed."
              exit 2
          else
              if ! kubectl logs -l app=volume-cleaner-scheduler -n das --tail | grep "Found pvc pvc2 from namespace anray-liu" -A 1 | grep "Not labelled. Skipping."; then
                  echo "Scheduler didn't skip pvc2. Test failed."
                  exit 2
              else
                  echo "Test passed."
              fi
          fi
